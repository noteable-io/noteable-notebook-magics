syntax = "proto3";

package s3.v1;

// The high-level Operation to be run.
// Generally will only contain the singular `oneof s3_operation` field.
message Operation {
    // A unique identifier that will be set as a key in redis
    // with the result of this operation.
    string identifier = 1;

    oneof s3_operation {
        SyncFromS3Operation sync_from_s3 = 2;
        GetRemoteStatusOperation get_remote_status = 3;
        SyncToS3Operation sync_to_s3 = 4;
    }
}

enum FileType {
    FILE_TYPE_UNSPECIFIED = 0;
    FILE_TYPE_PROJECT = 1;
    FILE_TYPE_DATASET = 2;
}

// An operation in S3 to sync files given a prefix back to the local filesystem
message SyncFromS3Operation {
    // The kernel's local filesystem path to sync.
    // e.g. project/, datasets/research/large.csv
    string prefix = 1;
    FileType file_type = 2;
}

// An operation in S3 to sync files given a prefix from the local filesystem to S3
message SyncToS3Operation {
    // The kernel's local filesystem path to sync.
    // e.g. project/, datasets/research/large.csv
    string prefix = 1;
    FileType file_type = 2;
}

message GetRemoteStatusOperation {
    // The kernel's local filesystem path to check.
    // e.g. project/, datasets/research/large.csv
    string prefix = 1;
    FileType file_type = 2;
}

message RemoteStatus {
    // The kernel's local filesystem path to check.
    // e.g. project/, datasets/research/large.csv
    string prefix = 1;
    // A list of remote files that have been modified, added, or deleted.
    repeated RemoteFileChange file_changes = 2;
}

message RemoteFileChange {
    // The type of file change that happened remotely compared to the local kernel's file system
    RemoteFileChangeType change_type = 1;
    // The path of the file that was changed, relative to the provided prefix.
    // e.g. research/large.csv, foo.ipynb
    string path = 2;
}

enum RemoteFileChangeType {
    REMOTE_FILE_CHANGE_TYPE_UNSPECIFIED = 0;
    REMOTE_FILE_CHANGE_TYPE_MODIFIED = 1;
    REMOTE_FILE_CHANGE_TYPE_ADDED = 2;
    REMOTE_FILE_CHANGE_TYPE_DELETED = 3;
}

message SyncResult {
    // The kernel's local filesystem path to sync.
    // e.g. project/, datasets/research/large.csv
    string prefix = 1;
    // The result status, ok or error
    ResultStatus status = 2;
    // A message related to the result status to show the user
    string status_message = 3;
}

enum ResultStatus {
    RESULT_STATUS_UNSPECIFIED = 0;
    RESULT_STATUS_OK = 1;
    RESULT_STATUS_ERROR = 2;
}

message PullResult {
    // The result status, ok or error
    ResultStatus status = 1;
    // A message related to the result status to show the user
    string status_message = 2;
}
